{
    "name": "make-to-cpp-props",
    "displayName": "Makefile to C/C++ config",
    "description": "C/Cpp configs generator from makefile",
    "publisher": "ZaikinDenis",
    "author": {
        "name": "Zaikin Denis",
        "email": "devprodest@gmail.com",
        "url": "https://cdeblog.ru"
    },
    "repository": {
        "type": "gitlab",
        "url": "https://gitlab.com/devprodest/make-to-cpp-props.git"
    },
    "icon": "make-to-cpp.png",
    "version": "0.0.11",
    "engines": {
        "vscode": "^1.83.0"
    },
    "keywords": [
        "Makefile",
        "c",
        "c++"
    ],
    "categories": [
        "Other",
        "Snippets"
    ],
    "extensionDependencies": [
        "ms-vscode.cpptools"
    ],
    "activationEvents": [
        "onLanguage:c",
        "onLanguage:cpp",
        "onLanguage:cuda-cpp"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "configuration": {
            "title": "Makefile to C/C++ config",
            "properties": {
                "make-to-cpp-props.configurations": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "name"
                        ],
                        "properties": {
                            "name": {
                                "markdownDescription": "Configuration identifier. `Mac`, `Linux`, and `Win32` are special identifiers for configurations that will be auto-selected on those platforms, but the identifier can be anything.",
                                "descriptionHint": "Markdown text between `` should not be translated or localized (they represent literal text) and the capitalization, spacing, and punctuation (including the ``) should not be altered.",
                                "type": "string"
                            },
                            "cStandard": {
                                "description": "Version of the C language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C standard version.",
                                "type": "string",
                                "enum": [
                                    "c89",
                                    "c99",
                                    "c11",
                                    "c17",
                                    "c23",
                                    "gnu89",
                                    "gnu99",
                                    "gnu11",
                                    "gnu17",
                                    "gnu23",
                                    "${default}"
                                ]
                            },
                            "cppStandard": {
                                "description": "Version of the C++ language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C++ standard version.",
                                "type": "string",
                                "enum": [
                                    "c++98",
                                    "c++03",
                                    "c++11",
                                    "c++14",
                                    "c++17",
                                    "c++20",
                                    "c++23",
                                    "gnu++98",
                                    "gnu++03",
                                    "gnu++11",
                                    "gnu++14",
                                    "gnu++17",
                                    "gnu++20",
                                    "gnu++23",
                                    "${default}"
                                ]
                            },
                            "includePath": {
                                "markdownDescription": "A list of paths for the IntelliSense engine to use while searching for included headers. Searching on these paths is not recursive. Specify `**` to indicate recursive search. For example, `${workspaceFolder}/**` will search through all subdirectories while `${workspaceFolder}` will not. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.",
                                "descriptionHint": "Markdown text between `` should not be translated or localized (they represent literal text) and the capitalization, spacing, and punctuation (including the ``) should not be altered.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "defines": {
                                "markdownDescription": "A list of preprocessor definitions for the IntelliSense engine to use while parsing files. Optionally, use `=` to set a value, e.g. `VERSION=1`.",
                                "descriptionHint": "Markdown text between `` should not be translated or localized (they represent literal text) and the capitalization, spacing, and punctuation (including the ``) should not be altered.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "compilerPath": {
                                "markdownDescription": "Full path of the compiler being used, e.g. `/usr/bin/gcc`, to enable more accurate IntelliSense.",
                                "descriptionHint": "Markdown text between `` should not be translated or localized (they represent literal text) and the capitalization, spacing, and punctuation (including the ``) should not be altered.",
                                "type": "string"
                            },
                            "mergeConfigurations": {
                                "markdownDescription": "Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.",
                                "descriptionHint": "Markdown text between `` should not be translated or localized (they represent literal text) and the capitalization, spacing, and punctuation (including the ``) should not be altered.",
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "make-to-cpp-props.toolchainName": {
                    "type": "string",
                    "default": "arm-none-eabi-gcc",
                    "description": "Строка имени тулчейна, например arm-none-eabi-gcc. Используется для подмены настоящего тулчейна и позволяет перехватывать аргументы командной строки"
                },
                "make-to-cpp-props.activeConfigName": {
                    "type": "string"
                },
                "make-to-cpp-props.toolchainVersion": {
                    "type": "string",
                    "default": "10.0.1",
                    "description": "Строка версии тулчейна"
                },
                "make-to-cpp-props.debug.console-log": {
                    "type": "boolean",
                    "default": true,
                    "description": "Разрешает печатать логи. Нужно для отладки"
                },
                "make-to-cpp-props.defines-regexp": {
                    "type": "string",
                    "default": "/\\s-D\\s?([\\w\\=]*[\\w\"\\\\\\.]*)\\s?/g",
                    "description": "Резулярное выражение для поиска define"
                },
                "make-to-cpp-props.includes-regexp": {
                    "type": "string",
                    "default": "/\\s-I\\s?\"?([.\\S\\w]*)\"?/g",
                    "description": "Резулярное выражение для поиска includes"
                },
                "make-to-cpp-props.generator.compilerPath": {
                    "type": "boolean",
                    "default": false,
                    "description": "Нужно ли заполнять поле \"compilerPath\""
                },
                "make-to-cpp-props.generator.make": {
                    "type": "string",
                    "default": "make clean && make all -j",
                    "description": "Строка для запуска сборки"
                }
            }
        },
        "menus": {
            "explorer/context": [
                {
                    "command": "make-to-cpp-props.createConfig",
                    "when": "explorerResourceIsFolder"
                }
            ]
        },
        "commands": [
            {
                "command": "make-to-cpp-props.createConfig",
                "title": "Сгенерировать конфигурацию"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run package",
        "compile": "webpack",
        "watch": "webpack --watch",
        "package": "webpack --mode production --devtool hidden-source-map && make -C ./src",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "pretest": "npm run compile-tests && npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "vscode:build": "vsce package",
        "vscode:publish": "vsce publish"
    },
    "devDependencies": {
        "@types/glob": "^8.1.0",
        "@types/mocha": "^10.0.1",
        "@types/node": "20.2.5",
        "@types/vscode": "^1.83.0",
        "@typescript-eslint/eslint-plugin": "^5.59.8",
        "@typescript-eslint/parser": "^5.59.8",
        "@vscode/test-electron": "^2.3.2",
        "copy-webpack-plugin": "^11.0.0",
        "eslint": "^8.41.0",
        "glob": "^8.1.0",
        "mocha": "^10.2.0",
        "ts-loader": "^9.4.3",
        "typescript": "^5.3.3",
        "vscode-nls-dev": "^4.0.4",
        "webpack": "^5.85.0",
        "webpack-cli": "^5.1.1"
    },
    "dependencies": {
        "vscode-cpptools": "^6.1.0"
    }
}