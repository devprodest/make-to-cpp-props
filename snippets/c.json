{
	"c source file": {
		"prefix": "csrc",
		"body": [
			"/// \\brief $4",
			"/// \\date $CURRENT_YEAR",
			"///",
			"/// \\details $0",
			"///",
			"",
			"//----------------------------------------------------- Includes -------------------------------------------------------",
			"#include \"$TM_FILENAME_BASE.h\"",
			"// APPS AND SERVICE includes",
			"// SW libs",
			"// HW libs",
			"// THIRDPARTY includes",
			"// SYSTEM includes",
			"// STD includes",
			"#include <stddef.h>",
			"#include <stdint.h>",
			"//------------------------------------------------------ Macros --------------------------------------------------------",
			"//----------------------------------------------------- Typedefs -------------------------------------------------------",
			"//---------------------------------------------------- Variables -------------------------------------------------------",
			"",
			"static size_t init_counter = 0; // Счетчик инициализаций",
			"",
			"//------------------------------------------------ Function prototypes -------------------------------------------------",
			"//------------------------------------------------- Inline Functions ---------------------------------------------------",
			"//------------------------------------------------- Static Functions ---------------------------------------------------",
			"//---------------------------------------------------- Functions -------------------------------------------------------",
			"",
			"/// \\brief Инициализация модуля ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}",
			"/// ",
			"void ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_init(void)",
			"{",
			"    if (init_counter++ == 0)",
			"    {",
			"        ${2:/* CODE */}",
			"    }",
			"}",
			"",
			"/// \\brief Деинициализация модуля ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}",
			"/// ",
			"void ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_deinit(void)",
			"{",
			"    if (init_counter > 0)",
			"    {",
			"        init_counter--;",
			"        if (init_counter == 0)",
			"        {",
			"            ${3:/* CODE */}",
			"        }",
			"    }",
			"}",
			"",
			"//------------------------------------------------------ Tasks ---------------------------------------------------------",
			""
		],
		"description": "c source file snippet"
	},
	"c header file": {
		"prefix": "chead",
		"body": [
			"/// \\file $TM_FILENAME",
			"/// \\brief $2",
			"/// \\date $CURRENT_YEAR",
			"///",
			"/// \\details $0",
			"///",
			"#pragma once",
			"//----------------------------------------------------- Includes -------------------------------------------------------",
			"",
			"//------------------------------------------------------ Macros --------------------------------------------------------",
			"//----------------------------------------------------- Typedefs -------------------------------------------------------",
			"//---------------------------------------------------- Variables -------------------------------------------------------",
			"//------------------------------------------------- Inline Functions ---------------------------------------------------",
			"//------------------------------------------------ Function prototypes -------------------------------------------------",
			"",
			"void ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_init(void);",
			"void ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_deinit(void);",
			"",
			"//--------------------------------------------------- End Of File ------------------------------------------------------",
			""
		],
		"description": "c source file snippet"
	},
	"c line": {
		"prefix": "line",
		"body": [
			"//----------------------------------------------------------------------------------------------------------------------"
		],
		"description": "break line"
	},
	"c typedef struct": {
		"prefix": "typestruct",
		"body": [
			"typedef struct ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_s",
			"{",
			"    ${3:/* FIELDS */}",
			"} ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_s;"
		],
		"description": "typedef struct"
	},
	"c typedef enum": {
		"prefix": "typeenum",
		"body": [
			"typedef enum ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_e",
			"{",
			"    ${3:/* ITEMS */}",
			"//---",
			"} ${1:${TM_FILENAME_BASE/[\\.-]/_/g}}_e;"
		],
		"description": "typedef enum"
	},
	"pragma once": {
		"prefix": "once",
		"body": [
			"#pragma once"
		],
		"description": "pragma once"
	},
	"clang-format": {
		"prefix": "clang-format",
		"body": [
			"// clang-format off",
			"$1",
			"// clang-format on"
		],
		"description": "clang-format"
	},
	"#if": {
		"prefix": "#if",
		"body": [
			"#if $1",
			"$2",
			"#else",
			"$3",
			"#endif // $1"
		],
		"description": "#if"
	},
	"FreeRTOS Task Function": {
		"prefix": ["freertos_task", "ftf"],
		"description": "FreeRTOS Task function",
		"body": [
		  "void ${1:${TM_FILENAME_BASE/[\\.-]/_/g}_task}(void *arg)",
		  "{",
		  "    (void)arg;",
		  "",
		  "    for(;;)",
		  "    {",
		  "        ${0:$BLOCK_COMMENT_START CODE $BLOCK_COMMENT_END}",
		  "    }",
		  "    vTaskDelete( NULL );",
		  "}"
		]
	  }
}